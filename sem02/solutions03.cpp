#include <iostream>
#include <cmath>

int main() {

    // 17.  –î–∞ —Å–µ –Ω–∞–ø–∏—à–µ –ø—Ä–æ–≥—Ä–∞–º–∞, –∫–æ—è—Ç–æ –ø—Ä–∏ –ø–æ–¥–∞–¥–µ–Ω–æ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–æ —á–∏—Å–ª–æ –∏–∑–ø–∏—Å–≤–∞ –∏–º–µ—Ç–æ –Ω–∞ –º–µ—Å–µ—Ü–∞,
    // —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∞—â –Ω–∞ —Ç–æ–≤–∞ —á–∏—Å–ª–æ. –í —Å–ª—É—á–∞–π, —á–µ —á–∏—Å–ª–æ—Ç–æ –Ω–µ –µ –≤–∞–ª–∏–¥–µ–Ω –º–µ—Å–µ—Ü, –¥–∞ —Å–µ –∏–∑–≤–µ–¥–µ "Invalid month"
    int month;
    std::cout << "Enter a month: ";
    std::cin >> month;

    if (month == 1) {
        std::cout << "The month is: January\n";
    } else if (month == 2) {
        std::cout << "The month is: February\n";
    } else if (month == 3) {
        std::cout << "The month is: March\n";
    } else if (month == 4) {
        std::cout << "The month is: April\n";
    } else if (month == 5) {
        std::cout << "The month is: May\n";
    } else if (month == 6) {
        std::cout << "The month is: June\n";
    } else if (month == 7) {
        std::cout << "The month is: July\n";
    } else if (month == 8) {
        std::cout << "The month is: August\n";
    } else if (month == 9) {
        std::cout << "The month is: September\n";
    } else if (month == 10) {
        std::cout << "The month is: October\n";
    } else if (month == 11) {
        std::cout << "The month is: November\n";
    } else if (month == 12) {
        std::cout << "The month is: December\n";
    } else {
        std::cout << "Invalid month\n";
    }

    // 18.  –î–∞ —Å–µ –Ω–∞–ø–∏—à–µ –ø—Ä–æ–≥—Ä–∞–º–∞, –∫–æ—è—Ç–æ –ø—Ä–∏ –≤—ä–≤–µ–¥–µ–Ω —Å–∏–º–≤–æ–ª –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ç–∞ –∏–∑–ø–∏—Å–≤–∞
    //     ‚Ä¢ "lowercase letter" - –∞–∫–æ –µ –º–∞–ª–∫–∞ –ª–∞—Ç–∏–Ω—Å–∫–∞ –±—É–∫–≤–∞
    //     ‚Ä¢ "uppercase letter" - –∞–∫–æ –µ –≥–æ–ª—è–º–∞ –ª–∞—Ç–∏–Ω—Å–∫–∞ –±—É–∫–≤–∞
    //     ‚Ä¢ "digit" - –∞–∫–æ –µ —Ü–∏—Ñ—Ä–∞
    //     ‚Ä¢ "other" - –∏–Ω–∞—á–µ
    char symbol;
    std::cout << "Enter a symbol: ";
    std::cin >> symbol;

    if (symbol >= 'a' && symbol <= 'z') {
        std::cout << "lowercase letter" << std::endl;
    } else if (symbol >= 'A' && symbol <= 'Z') {
        std::cout << "uppercase letter" << std::endl;
    } else if (symbol >= '0' && symbol <= '9') {
        std::cout << "digit" << std::endl;
    } else {
        std::cout << "other" << std::endl;
    }

    // 19.  –î–∞ —Å–µ –Ω–∞–ø–∏—à–µ –ø—Ä–æ–≥—Ä–∞–º–∞, –∫–æ—è—Ç–æ –ø—Ä–∏ –≤—ä–≤–µ–¥–µ–Ω–∏ –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ç–∞ 3 –æ—Ü–µ–Ω–∫–∏ –∏–∑–≤–µ–∂–¥–∞ —Å—Ä–µ–¥–Ω–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∞ –∑–∞–µ–¥–Ω–æ —Å –æ—Ü–µ–Ω–∫–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç –æ—Ç —Ç–æ–≤–∞ –≤ –∫–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ø–∞–¥–∞.
    //     ‚Ä¢ [2, 3) - Poor
    //     ‚Ä¢ [3, 3.5) - Average
    //     ‚Ä¢ [3.5, 4.5) - Good
    //     ‚Ä¢ [4.5, 5.5) - Very Good
    //     ‚Ä¢ [5.5, 6] - Excellent
    double grade1, grade2, grade3;
    std::cin >> grade1 >> grade2 >> grade3;

    double average = (grade1 + grade2 + grade3) / 3;
    if (average >= 2.0 && average < 3.0) {
        std::cout << "Average grade: " << average << " (Poor)" << std::endl;
    } else if (average >= 3.0 && average < 3.5) {
        std::cout << "Average grade: " << average << " (Average)" << std::endl;
    } else if (average >= 3.5 && average < 4.5) {
        std::cout << "Average grade: " << average << " (Good)" << std::endl;
    } else if (average >= 4.5 && average < 5.5) {
        std::cout << "Average grade: " << average << " (Very Good)" << std::endl;
    } else if (average >= 5.5 && average <= 6.0) {
        std::cout << "Average grade: " << average << " (Excellent)" << std::endl;
    } else {
        std::cout << "Invalid average" << std::endl;
    }

    // 21. –î–∞ —Å–µ –Ω–∞–ø–∏—à–µ –ø—Ä–æ–≥—Ä–∞–º–∞, –∫–æ—è—Ç–æ –ø—Ä–∏ –ø–æ–¥–∞–¥–µ–Ω–∏ —Ä–∞–¥–∏—É—Å r –∏ –¥–≤—É–º–µ—Ä–Ω–∞ —Ç–æ—á–∫–∞ (—Ö, —É) –ø—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ —Ç–æ—á–∫–∞—Ç–∞ —Å–µ –Ω–∞–º–∏—Ä–∞
    // –≤—ä—Ç—Ä–µ/–∏–∑–≤—ä–Ω –∏–ª–∏ –ø–æ –∫–æ–Ω—Ç—É—Ä–∞ –Ω–∞ –æ–∫—Ä—ä–∂–Ω–æ—Å—Ç —Å —Ü–µ–Ω—Ç—ä—Ä (0,0).
    double r, x, y;
    std::cout << "r: ";
    std::cin >> r;
    std::cout << "x: ";
    std::cin >> x;
    std::cout << "y: ";
    std::cin >> y;

    double distance = sqrt(x * x + y * y);
    if (distance < r) {
        std::cout << "Inside" << std::endl;
    } else if (distance > r) {
        std::cout << "Outside" << std::endl;
    } else {
        std::cout << "On the line" << std::endl;
    }

    // 22. 1.  –î–∞ —Å–µ —Å—ä—Å—Ç–∞–≤–∏ –ø—Ä–æ–≥—Ä–∞–º–∞, –∫–æ—è—Ç–æ –≤—ä–≤–µ–∂–¥–∞ –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ç–∞ —Ü—è–ª–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ –ø–µ—Ç—Ü–∏—Ñ—Ä–µ–Ω–æ —á–∏—Å–ª–æ.
    // –ü—Ä–æ–≥—Ä–∞–º–∞—Ç–∞ –¥–∞ –∏–∑–≤–µ–¥–∞:
    //     –∞) –±—Ä–æ—è –Ω–∞ –Ω–µ—á–µ—Ç–Ω–∏—Ç–µ —Ü–∏—Ñ—Ä–∏ –Ω–∞ —á–∏—Å–ª–æ—Ç–æ;
    //     –±) —Å—É–º–∞—Ç–∞ –Ω–∞ —á–µ—Ç–Ω–∏—Ç–µ —Ü–∏—Ñ—Ä–∏ –Ω–∞ —á–∏—Å–ª–æ—Ç–æ.
    int number;
    int oddCount = 0;
    int evenSum = 0;

    std::cout << "Enter a positive five-digit integer: ";
    std::cin >> number;

    if (number >= 10000 && number <= 99999) {
        int digit1 = number / 10000;
        int digit2 = (number / 1000) % 10;
        int digit3 = (number / 100) % 10;
        int digit4 = (number / 10) % 10;
        int digit5 = number % 10;

        if (digit1 % 2 == 0) { evenSum += digit1; }
        if (digit2 % 2 == 0) { evenSum += digit2; }
        if (digit3 % 2 == 0) { evenSum += digit3; }
        if (digit4 % 2 == 0) { evenSum += digit4; }
        if (digit5 % 2 == 0) { evenSum += digit5; }

        if (digit1 % 2 != 0) { oddCount++; }
        if (digit2 % 2 != 0) { oddCount++; }
        if (digit3 % 2 != 0) { oddCount++; }
        if (digit4 % 2 != 0) { oddCount++; }
        if (digit5 % 2 != 0) { oddCount++; }

        std::cout << "Count of odd digits: " << oddCount << std::endl;
        std::cout << "Sum of even digits: " << evenSum << std::endl;
    } else {
        std::cout << "Invalid input" << std::endl;
    }

    // 23. –î–∞ —Å–µ –Ω–∞–ø–∏—à–µ –ø—Ä–æ–≥—Ä–∞–º–∞, –∫–æ—è—Ç–æ –ø—Ä–∏ –≤—ä–≤–µ–¥–∞–Ω–∞ —Å—É–º–∞ –¥–∞ –∏–∑–ø–∏—Å–≤–∞ –±—Ä–æ—è –º–æ–Ω–µ—Ç–∏,
    // –Ω—É–∂–Ω–∏ –∑–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ —Å—É–º–∞—Ç–∞, –∞–∫–æ  –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á–µ —Ä–∞–∑–ø–æ–ª–∞–≥–∞–º–µ —Å –±–µ–∑–±—Ä–æ–π –º–Ω–æ–≥–æ –º–æ–Ω–µ—Ç–∏ –æ—Ç
    // 100, 50, 20, 10, 5, 2, 1 –∏ –ø—ä—Ä–≤–æ –≤–∑–∏–º–∞–º–µ –∫–æ–ª–∫–æ—Ç–æ –º–æ–∂–µ–º –æ—Ç –Ω–∞–π-–≥–æ–ª—è–º–∞—Ç–∞ –≤—ä–∑–º–æ–∂–Ω–∞ –º–æ–Ω–µ—Ç–∞.
    int amount;
    std::cin >> amount;

    // –í—Ö–æ–¥—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –≤–∞–ª–∏–¥–∏—Ä–∞!
    if (amount <= 0) {
        std::cout << "–°—É–º–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–∞ :(" << std::endl;
    }

    int coins100 = amount / 100; // –ù–∞–º–∏—Ä–∞–º–µ –∫–æ–ª–∫–æ –º–æ–Ω–µ—Ç–∏ —Å –Ω–æ–º–∏–Ω–∞–ª 100 —â–µ –Ω–∏ —Ç—Ä—è–±–≤–∞—Ç
    amount = amount % 100; // –ù–∞–º–∏—Ä–∞–º–µ –æ—Å—Ç–∞—Ç—ä–∫–∞ –æ—Ç —Å—É–º–∞—Ç–∞ –∏ –∑–∞ –Ω–µ–≥–æ –ø–æ–≤—Ç–∞—Ä—è–º–µ —Å—Ç—ä–ø–∫–∞—Ç–∞ —Å—ä—Å —Å–ª–µ–¥–≤–∞—â–∏—è –Ω–∞–π-–≥–æ–ª—è–º –Ω–æ–º–∏–Ω–∞–ª
    int coins50 = amount / 50;
    amount = amount % 50;
    int coins20 = amount / 20;
    amount = amount % 20;
    int coins10 = amount / 10;
    amount = amount % 10;
    int coins5 = amount / 5;
    amount = amount % 5;
    int coins2 = amount / 2;
    amount = amount % 2;
    int coins1 = amount;

    std::cout << coins100 << " (x100), "
            << coins50 << " (x50), "
            << coins20 << " (x20), "
            << coins10 << " (x10), "
            << coins5 << " (x5), "
            << coins2 << " (x2), "
            << coins1 << " (x1)" << std::endl;

    // 24. –ü–æ –≤—ä–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞ (–¥–µ–Ω, –º–µ—Å–µ—Ü, –≥–æ–¥–∏–Ω–∞) –¥–∞ —Å–µ –∏–∑–≤–µ–¥–µ —Å–ª–µ–¥–≤–∞—â–∞—Ç–∞.
    int day, month, year;
    std::cin >> day >> month >> year;

    bool isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);

    int daysInMonth;
    if (month == 2) {
        daysInMonth = isLeapYear ? 29 : 28;
    } else if (month == 4 || month == 6 || month == 9 || month == 11) {
        daysInMonth = 30;
    } else {
        daysInMonth = 31;
    }

    if (day == daysInMonth) {
        day = 1;
        if (month == 12) {
            month = 1;
            year += 1;
        } else {
            month += 1;
        }
    } else {
        day += 1;
    }

    std::cout << "Tomorrow is: " << day << "/" << month << "/" << year << std::endl;

    // 25. üí° –î–∞–¥–µ–Ω–∏ —Å–∞ –≤–∏ 9 —á–∏—Å–ª–∞ (–º–∞—Ç—Ä–∏—Ü–∞ 3x3). –î–∞ —Å–µ –ø—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –µ –º–∞–≥–∏—á–µ—Å–∫–∏ –∫–≤–∞–¥—Ä–∞—Ç.
    // –ï–¥–∏–Ω –∫–≤–∞–¥—Ä–∞—Ç –Ω–∞—Ä–∏—á–∞–º–µ –º–∞–≥–∏—á–µ—Å–∫–∏ –∞–∫–æ —Å—É–º–∞—Ç–∞ –æ—Ç —Å—Ç–æ–π–Ω–æ—Å—Ç–∏—Ç–µ –ø–æ —Ä–µ–¥–æ–≤–µ—Ç–µ,
    // —Å—É–º–∞—Ç–∞ –ø–æ –∫–æ–ª–æ–Ω–∏—Ç–µ –∏ —Å—É–º–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω–∏—è—Ç –∏ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–∏—è—Ç –¥–∏–∞–≥–æ–Ω–∞–ª –µ –µ–¥–Ω–∞ –∏ —Å—ä—â–∞.
    // extra-credit work

}
